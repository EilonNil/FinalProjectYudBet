#pragma once
#include <iostream>

static std::string xssExp = "XSS(Cross-site Scripting) is a type of injection attack, that injects malicious scripts into websites.\nthere are two types of XSS attacks:\nReflected XSS: in this attack the attacker injects the script in a way that it immediately reflects and runs. can be used in search boxes and error messages.\nStored XSS: the malicious script is injected in a place that runs the script every time a user goes to the website, for example inside a database that displays on the website.\nSome of the dangers of XSS are the possibility of stealing a user's session token and stealing their account, or downloading viruses on innocent users' computers.\nTo protect from XSS, sanitize all input from the user and validate it. Make sure the user can not input information that is being displayed to other users and esspecially to admins that has not been checked.";
static std::string sqliExp = "SQL Injection is a form of injection attack that utilizes unsafe SQL statements to inject harmful queries. SQL Injection, or SQLI for short is the art of altering the website's innocent query to achieve something that was not intended.\nExamples of SQLI are logging in as an admin without knowing the username or the password, and accessing entire databases through the search bar.\nTo protect against SQLI, sanitize all SQL related input given by the user. This means that the website will treat the user input as raw text and not give it the option to make SQL commands.";
static std::string redirExp = "Unvalidated Redirects relates to redirecting users to unwanted websites. Some websites have a whitelist for allowed URLs for the user to be redirected to, but alot either lack it or have a bad list.\nIn that case, the attacker can make the user go to an unvalidated website, and do harmful actions like hijacking their session and stealing their accounts or downloading a virus on their computer.\nTo protect against this Unvalidated Redirects, create a valid whitelist for redirects, and make sure users can not be redirected to any other websites. A key mistake programmers make is making it so the URL needs to contain a whitelisted URL. However, there are ways to bypass this so make it that the URL has to be exactly like a whitelist URL.";
static std::string tamperExp = "Product Tampering is achieved by sending PUT type HTTP packets to a website to alter products in a store type website.\nAttackers can use this vulnerability in many ways, such as inject XSS into the product, erase products and alter their prices.\nTo protect against product tampering, make sure that no user has access to sending PUT and POST packets to the products part of the store. This way, the attacker will not be able to alter the products.";
static std::string adminExp = "Admin Registration, as it sounds, is abusing the way the registration system works to register a new user as an admin.\nThe dangers of this vulnerability are pretty straight forward, and vary between each website. However, in every website the outcome is not good.\nTo protect against admin registration, make sure that after a user has registered, their role is set. this will make it so they can not alter their role using web traffic changing tools because the role will only be assigned after registration.";
