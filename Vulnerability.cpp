#include "Vulnerability.h"

Vulnerability::Vulnerability() {
	codes = std::vector<Code>();
}

Vulnerability::Vulnerability(const std::string name, std::vector<Code> codes) {
	this->name = name;
	this->codes = codes;
}

const Vulnerability& Vulnerability::operator=(const Vulnerability& other) {
	this->name = other.name;
	this->codes = other.codes;
	return *this;
}

Vulnerability::Vulnerability(const Vulnerability& other) {
	*this = other;
}

bool Vulnerability::changeCodes() {
	bool keepSuccess = keepOriginalCode();
	if (!keepSuccess) {
		return false;
	}

	for (auto code : this->codes) {
		bool success = code.changeCode();
		if (!success) {
			return false;
		}
	}
	return true;
}

std::vector<std::string> Vulnerability::getUniquePaths() {
	std::vector<std::string> uniq;
	for (auto code : this->codes) {
		if (!isIn(uniq, code.getFilePath())) {
			uniq.push_back(code.getFilePath());
		}
	}
	return uniq;
}

bool Vulnerability::isIn(std::vector<std::string> list, std::string newPath) {
	for (auto path : list) {
		if (path == newPath) {
			return true;
		}
	}
	return false;
}

bool Vulnerability::keepOriginalCode() {
	std::vector<std::string> uniq = this->getUniquePaths();
	std::string old = "old";
	std::string newPath;
	for (auto path : uniq) {
		newPath = path + old;
		bool success = moveCode(newPath, path);
		if (!success) {
			return false;
		}
	}
	return true;
}

bool moveCode(std::string to, std::string from) {
	std::ifstream fromFile(from);
	std::ofstream toFile(to);
	std::string line;

	if (fromFile.is_open()) {
		while (std::getline(fromFile, line)) {
			toFile << line << '\n';
		}
		fromFile.close();
		toFile.close();
	}
	else {
		return false;
	}
	return true;
}

Vulnerability::~Vulnerability() {

}
